#!/usr/bin/perl
#

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Long;
use NADTMythTV;
use NADTMythTV::Util;
use YAML;

# parse args
my %opts = (
  verbose => 0,
  debug => 0,
);
my @origargs = @ARGV;
GetOptions(
  \%opts,
  'verbose!',
  'debug!',
);

# load config
my $cfg = NADTMythTV->cfg;

# get logging
my $log = NADTMythTV->log( verbose => $opts{verbose}, debug => $opts{debug} );
$log->debug("orig args: @origargs");
$log->info('START');

# set up MythTV
my $nadtmyth = NADTMythTV->new;

# set up database
my $mythdb = $nadtmyth->mythdb;

# get a lock
NADTMythTV::Util->lock;

# get list of converted programs where there is no to_publish record
my $rs = $mythdb->resultset('NadtmythConverted');
my $converts = $rs->search(
  { 'to_publish.complete' => [ 0, undef ], 'recorded.autoexpire' => { '!=' => 9999 } },
  { join => [ 'to_publish', 'recorded' ] }
);
while( my $convert = $converts->next ) {
  my $rs = $mythdb->resultset('Recorded');
  my $recorded_rec = $rs->single( { chanid => $convert->chanid, starttime => $convert->starttime } );
  unless( $recorded_rec ) {
    $log->warn("can't find source program for converted id ", $convert->id);
    next;
  }
  my $fulltitle = NADTMythTV::Util->fulltitle( $recorded_rec );
  my $starttime = $recorded_rec->starttime;
  for my $matchprofile( @{ $cfg->{publish}->{match} } ) {
    my $rx = $matchprofile->{regex};
    if( $convert->destformat eq $matchprofile->{format} && $fulltitle =~ m/$rx/ ) {

      # create the to_publish record if needed
      my $to_publish;
      if( $to_publish = $convert->to_publish ) {
        $log->info("found existing to_publish record for $fulltitle at $starttime");
      }
      else {
        $to_publish = $convert->create_related( to_publish => {} );
        $log->info("created to_publish record for $fulltitle at $starttime");
      }

      # create to_publish_dest records if needed
      for my $dest( keys %{ $matchprofile->{dest} } ) {
        my $to_publish_dest;
        my $dests = $to_publish->search_related( to_publish_dest => { dest => $dest } );
        if( $dests->count ) {
          $to_publish_dest = $dests->first;
          $log->info("found existing to_publish_dest record for $dest");
        }
        else {
          $to_publish_dest = $to_publish->create_related( to_publish_dest => { dest => $dest, purge_days => $matchprofile->{dest}->{$dest}->{keepdays} } );
          $log->info("adding dest for $dest");
        }

        # create to_publish_inform records if needed
        for my $email( @{ $matchprofile->{dest}->{$dest}->{inform} } ) {
          my $to_publish_inform;
          my $informs = $to_publish_dest->search_related( to_publish_inform => { email => $email } );
          if( $informs->count ) {
            $to_publish_inform = $informs->first;
            $log->info("found existing to_publish_inform for $email; not creating another");
          }
          else {
            $to_publish_inform = $to_publish_dest->create_related( to_publish_inform => { email => $email } );
            $log->info("adding inform for $email");
          }
        }
      }

    }
  }
}

# commit database
$mythdb->txn_commit;

# all done
$log->info('STOP');
NADTMythTV::Util->unlock;
exit(0);

#
# EOF
