#!/usr/bin/perl
#

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Long;
use NADTMythTV;
use YAML;

# parse args
my %opts = (
  verbose => 0,
  debug => 0,
);
my @origargs = @ARGV;
GetOptions(
  \%opts,
  'verbose!',
  'debug!',
);

# load config
my $cfg = NADTMythTV->cfg;

# get logging
my $log = NADTMythTV->log( verbose => $opts{verbose}, debug => $opts{debug} );
$log->debug("orig args: @origargs");
$log->info('START');

# set up MythTV
my $nadtmyth = NADTMythTV->new;

# set up database
my $mythdb = $nadtmyth->mythdb;

# get list of converted programs where there is no to_publish record
my $rs = $mythdb->resultset('NadtmythConverted');
my $converts = $rs->search(
  { 'to_publish.complete' => undef },
  { join => 'to_publish' }
);
while( my $convert = $converts->next ) {
  my $rs = $mythdb->resultset('Recorded');
  my $recorded_rec = $rs->single( { chanid => $convert->chanid, starttime => $convert->starttime } );
  unless( $recorded_rec ) {
    $log->warn("can't find source program for converted id ", $convert->id);
    next;
  }
  my $fulltitle;
  if( $recorded_rec->subtitle ) {
    $fulltitle = $recorded_rec->title . ' - ' . $recorded_rec->subtitle;
  }
  else {
    $fulltitle = $recorded_rec->title;
  }
  my $starttime = $recorded_rec->starttime;
  for my $matchprofile( @{ $cfg->{publish}->{match} } ) {
    my $rx = $matchprofile->{regex};
    if( $convert->destformat eq $matchprofile->{format} && $fulltitle =~ m/$rx/ ) {

      # create the to_publish record
      my $to_publish_rec = $convert->create_related( 'to_publish', {} )
        or $log->logdie("can't create to_publish record");
      $log->info("created to_publish record for $fulltitle at $starttime");

      # create one or more to_publish_dest records  
      for my $dest( keys %{ $matchprofile->{dest} } ) {
        my $to_publish_dest_rec = $to_publish_rec->create_related( 'to_publish_dest', {
          dest => $dest
        } ) or $log->logdie("can't create to_publish_dest record");
      $log->info("adding dest for $dest");

        # create one or more to_publish_inform records
        for my $email( @{ $matchprofile->{dest}->{$dest}->{inform} } ) {
          my $to_publish_inform_rec = $to_publish_dest_rec->create_related( 'to_publish_inform', {
            email => $email,
          } ) or $log->logdie("can't create to_publish_inform record");
          $log->info("adding inform for $email");
        }
      }

    }
  }
}

# commit database
$mythdb->txn_commit;

# all done
$log->info('STOP');
exit(0);

#
# EOF
