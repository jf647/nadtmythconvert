#!/usr/bin/perl
#

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Long;
use NADTMythTV;
use NADTMythTV::Util;
use Path::Class qw|dir file|;
use File::Find::Rule;

# parse args
my %opts;
my @origargs = @ARGV;
GetOptions(
  \%opts,
  'verbose!',
  'debug!',
);

# load config
my $cfg = NADTMythTV->cfg;

# get logging
my $log = NADTMythTV->log( verbose => $opts{verbose}, debug => $opts{debug} );
$log->info('START');

# set up MythTV
my $nadtmyth = NADTMythTV->new;

# set up database
my $mythdb = $nadtmyth->mythdb;
my $recorded_rs = $mythdb->resultset('Recorded');
my $converted_rs = $mythdb->resultset('NadtmythConverted');
my $linked_rs = $mythdb->resultset('NadtmythLinked');

# build convert dirs
my @convertdirs;
for my $outputtype( keys %{ $cfg->{output} } ) {
  push @convertdirs, $cfg->{output}->{$outputtype}->{dir};
}

# build link dirs
my %linkdirs;
for my $outputtype( keys %{ $cfg->{output} } ) {
  for my $linktemplate( @{ $cfg->{output}->{$outputtype}->{links} } ) {
    my $linkdir = file( $linktemplate )->dir->stringify;
    $linkdirs{$linkdir}++;
  }
}

# loop until we pass through without doing anything
my $done = 0;
my $touched;
my @todel;
while( ! $done ) {
  
  $touched = 0;

  # remove converted records that have no recorded record
  $log->info("looking for converted records without originals");
  my $converted = $converted_rs->search;
  undef @todel;
  while( my $convert = $converted->next ) {
    unless( $convert->recorded ) {
      push @todel, $convert->id;
      next;
    }
  }
  for my $todel( @todel ) {
    $log->info("deleting converted record $todel: original has been deleted");
    $converted_rs->find( $todel )->delete;
    $touched++;
  }
  
  # remove converted records that are autoexpire deleted
  $log->info("looking for converted records that are autoexpired");
  $converted = $converted_rs->search;
  undef @todel;
  while( my $convert = $converted->next ) {
    if( 9999 == $convert->recorded->autoexpire ) {
      push @todel, $convert->id;
      next;
    }
  }
  for my $todel( @todel ) {
    $log->info("deleting converted record $todel: original is autoexpired");
    $converted_rs->find( $todel )->delete;
    $touched++;
  }
  
  # remove links that have no converted record
  $log->info("looking for links with no converted record");
  my $linked = $linked_rs->search;
  undef @todel;
  while( my $link = $linked->next ) {
    unless( $link->converted ) {
      push @todel, $link->id;
    }
  }
  for my $todel( @todel ) {
    $log->info("deleting linked record $todel: converted has been deleted");
    $linked_rs->find( $todel )->delete;
    $touched++;
  }

  # iterate over convert records, removing any that aren't on disk
  $log->info("looking for converted records no longer on disk");
  $converted = $converted_rs->search;
  undef @todel;
  while( my $convert = $converted->next ) {
    my $convertpath = file( $convert->destdir, $convert->destfile );
    unless( -f $convertpath ) {
      push @todel, $convert->id;
    }
  }
  for my $todel( @todel ) {
    $log->info("deleting converted record $todel: file on disk no longer exists");
    $converted_rs->find( $todel )->delete;
    $touched++;
  }

  # iterate over link records, removing any that aren't on disk
  $log->info("looking for linked records no longer on disk");
  $linked = $linked_rs->search;
  undef @todel;
  while( my $link = $linked->next ) {
    my $linkpath = file( $link->linkdir, $link->linkfile );
    unless( -l $linkpath ) {
      push @todel, $link->id;
    }
  }
  for my $todel( @todel ) {
    $log->info("deleting linked record $todel: link on disk no longer exists");
    $linked_rs->find( $todel )->delete;
    $touched++;
  }
  
  # iterate over converts on disk, removing any that aren't in the DB
  $log->info("looking for converts on disk not in DB");
  undef @todel;
  for my $convertdir( @convertdirs ) {
    my $rule = File::Find::Rule->file->start($convertdir);
    while( my $file = $rule->match ) {
      $file = file( $file );
      unless( $converted_rs->single( { destdir => $file->dir, destfile => $file->basename } ) ) {
        push @todel, $file;
      }
    }
  }
  for my $todel( @todel ) {
    $log->info("removing $todel: no matching DB record");
    unless( unlink( $todel ) ) {
      $log->error("cannot delete $todel: $!");
    }
    $touched++
  }
  
  # iterate over links on disk, removing any that don't resolve
  $log->info("looking for links on disk that don't resolve");
  undef @todel;
  for my $linkdir( keys %linkdirs ) {
    my $rule = File::Find::Rule->symlink->start($linkdir);
    while( my $link = $rule->match ) {
      my $dest = file( $link )->resolve;
      unless( -f $dest ) {
        push @todel, $link;
      }
    }
  }
  for my $todel( @todel ) {
    $log->info("removing $todel: referant does not exist on disk");
    unless( unlink( $todel ) ) {
      $log->error("cannot delete $todel: $!");
    }
    $touched++
  }

  # we are only done if nothing has been touched
  $done = 1 if( 0 == $touched );

}  

# commit the transaction
$mythdb->txn_commit;

# all done
$log->info('STOP');
exit(0);

#
# EOF
