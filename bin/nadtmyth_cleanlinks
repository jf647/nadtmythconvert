#!/usr/bin/perl
#

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../lib";

use Getopt::Long;
use NADTMythTV;
use NADTMythTV::Util;
use Path::Class qw|dir file|;
use File::Find::Rule;

# parse args
my %opts;
my @origargs = @ARGV;
GetOptions(
  \%opts,
  'verbose!',
  'debug!',
);

# load config
my $cfg = NADTMythTV->cfg;

# get logging
my $log = NADTMythTV->log( verbose => $opts{verbose}, debug => $opts{debug} );
$log->info('START');

# set up MythTV
my $nadtmyth = NADTMythTV->new(
  db_cred => {
    dsn => $cfg->{database}->{dsn},
    user => $cfg->{database}->{user},
    password => $cfg->{database}->{password},
  },
);

# set up database
my $mythdb = $nadtmyth->mythdb;
my $nadtdb = $nadtmyth->nadtdb;

# find all links
# - for original shows (linkformat is null), check if the orig recording exists both in the db and on disk.  If not, delete
# - for converted, check if the converted file exists both in the db and on disk.  If not, delete
my $linked_rs = $nadtdb->resultset('Linked');
my $converted_rs = $nadtdb->resultset('Converted');
my $recorded_rs = $mythdb->resultset('Recorded');
my @todel;
my $deleted = 0;
$log->debug("searching for orphaned links");
my $links = $linked_rs->search;
my %seenlinks;
while( my $link = $links->next ) {

  my $linkfile = file( $link->linkdir, $link->linkfile );
  $seenlinks{$linkfile}++;
  $log->debug("considering $linkfile");
  
  # does the link even exist?
  unless( -l $linkfile ) {
    $log->info("link $linkfile does not exist on disk");
    push @todel, [ $link->id, $linkfile ];
    next;
  }
  
  if( $link->linkformat ) {

    # converted link
    my $converted = $converted_rs->single( {
      chanid => $link->chanid,
      starttime => $link->starttime,
      destformat => $link->linkformat,
    } );
    if( $converted ) {
      my $convertedfile = file( $converted->destdir, $converted->destfile );
      unless( -f $convertedfile ) {
        $log->info("converted recording for link $linkfile exists in DB but not on disk");
        push @todel, [ $link->id, $linkfile ];
        next;
      }
    }
    else {
      $log->info("converted recording for link $linkfile does not exist in DB");
      push @todel, [ $link->id, $linkfile ];
      next;
    }
    
  }
  else {

    # show link
    my $orig = $recorded_rs->single( {
      chanid => $link->chanid,
      starttime => $link->starttime,
    } );
    if( $orig ) {
      my $origfile = NADTMythTV::Util->recordingpath( {
        chanid => $link->chanid,
        starttime => $link->starttime,
      } );
      die "can't get original path from database!" unless( $origfile );
      unless( -f $origfile->{path} ) {
        $log->info("original recording for link $linkfile exists in DB but not on disk");
        push @todel, [ $link->id, $linkfile ];
        next;
      }
    }
    else {
      $log->info("original recording for link $linkfile does not exist in DB");
      push @todel, [ $link->id, $linkfile ];
      next;
    }

  }

  # final check - resolve link and check for what's pointed to
  my $dest = $linkfile->resolve;
  unless( -f $dest ) {
    $log->info("$linkfile points to $dest which does not exist");
    push @todel, [ $link->id, $linkfile ];
  }

}

# delete orphans found via DB
for my $todel( @todel ) {
  if( -f $todel->[1] ) {
    if( unlink( $todel->[1] ) ) {
      $log->info("removed $todel->[1] from disk");
    }
    else {
      $log->error("cannot delete $todel->[1]: $!");
    }
  }
  my $count = $linked_rs->search( { id => $todel->[0] } )->count;
  if( 1 == $count ) {
    if( my $record = $linked_rs->find( $todel->[0] ) ) {
      if( $record->delete ) {
        $log->info("removed $todel->[1] from database");
        $deleted++;
      }
      else {
        $log->error("can't remove $todel->[1] from database");
      }
    }
    else {
      $log->error("can't get record for $todel->[1]");
    }
  }
  else {
    $log->error("found $count rows instead of 1 for $todel->[1]");
  }
}

# find orphans via disk
my %linkdirs;
for my $linktemplate( @{ $cfg->{showlinks} } ) {
  my $linkdir = file( $linktemplate )->dir->stringify;
  $linkdirs{$linkdir}++;
}
for my $outputtype( keys %{ $cfg->{output} } ) {
  for my $linktemplate( @{ $cfg->{output}->{$outputtype}->{links} } ) {
    my $linkdir = file( $linktemplate )->dir->stringify;
    $linkdirs{$linkdir}++;
  }
}
for my $linkdir( keys %linkdirs ) {
  my $rule = File::Find::Rule->symlink->start($linkdir);
  while( my $link = $rule->match ) {
    unless( exists $seenlinks{$link} ) {
      $log->debug("considering non-DB link $link");
      my $dest = file( $link )->resolve;
      unless( -f $dest ) {
        $log->info("$link points to $dest which does not exist");
        unless( unlink( $link ) ) {
          $log->error("cannot delete $link: $!");
        }
        $deleted++;
      }
    }
  }
}

$nadtdb->txn_commit;

# all done
$log->info("deleted $deleted links");
$log->info('STOP');
exit(0);

#
# EOF
